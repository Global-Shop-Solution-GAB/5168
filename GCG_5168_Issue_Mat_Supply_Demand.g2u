Program.Sub.ScreenSU.Start
Gui.f_IssMat..Create
Gui.f_IssMat..Caption("Issue Material")
Gui.f_IssMat..Size(15360,6060)
Gui.f_IssMat..MinX(15360)
Gui.f_IssMat..MinY(6060)
Gui.f_IssMat..Position(0,0)
Gui.f_IssMat..BackColor(-2147483633)
Gui.f_IssMat..MousePointer(0)
Gui.f_IssMat..Event(UnLoad,f_IssMat_UnLoad)
Gui.f_IssMat.GsGcIssMat.Create(GsGridControl)
Gui.f_IssMat.GsGcIssMat.Size(14820,3960)
Gui.f_IssMat.GsGcIssMat.Position(135,315)
Gui.f_IssMat.GsGcIssMat.Anchor(15)
Gui.f_IssMat.GsGcIssMat.Event(CellValueChanged,GsGcIssMat_CellValueChanged)
Gui.f_IssMat.GsGcIssMat.Event(RowCellClick,GsGcIssMat_RowCellClick)
Gui.f_IssMat.cmdIssMat.Create(Button)
Gui.f_IssMat.cmdIssMat.Size(2820,375)
Gui.f_IssMat.cmdIssMat.Position(1890,4770)
Gui.f_IssMat.cmdIssMat.Caption("Issue Material")
Gui.f_IssMat.cmdIssMat.Event(Click,cmdIssMat_Click)
Gui.f_IssMat.cmdIssMat.Anchor(6)
Gui.f_IssMat.txtEstVol.Create(TextBox,"",True,1230,300,0,6540,4800,False,0,"Arial",8,-2147483643,1)
Gui.f_IssMat.txtEstVol.Anchor(6)
Gui.f_IssMat.lbl1.Create(Label,"Total Estimated",True,1230,255,0,6540,4485,True,0,"Arial",8,-2147483633,0)
Gui.f_IssMat.lbl1.Anchor(6)
Gui.f_IssMat.lbl2.Create(Label,"Total Actual",True,1020,255,0,8580,4485,True,0,"Arial",8,-2147483633,0)
Gui.f_IssMat.lbl2.Anchor(6)
Gui.f_IssMat.txtActVol.Create(TextBox,"",True,1215,300,0,8580,4800,True,0,"Arial",8,-2147483643,1)
Gui.f_IssMat.txtActVol.Anchor(6)
Gui.f_IssMat.txtActVol.Event(LostFocus,txtActVol_LostFocus)
Gui.f_IssMat.txtUM.Create(TextBox,"",True,1215,300,0,10290,4800,False,0,"Arial",8,-2147483643,1)
Gui.f_IssMat.txtUM.Anchor(6)
Gui.f_IssMat.lbl3.Create(Label,"Unit of Measure",True,1305,255,0,10290,4485,True,0,"Arial",8,-2147483633,0)
Gui.f_IssMat.lbl3.Anchor(6)
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start
v.Global.fEstimate.Declare(Float)
v.Global.fActual.Declare(Float)
v.Global.fActualPrev.Declare(Float)
v.Global.fTotDiff.Declare(Float)
v.Global.sPart.Declare(String)
v.Global.sRev.Declare(String)
v.Global.sLoc.Declare(String)
v.Global.sUM.Declare(String)
v.Global.sPartRev.Declare(String)
Program.External.Include.Library("450100.lib")
Program.Sub.Preflight.End

Program.Sub.Main.Start
'Author: GaryB
'Date:   09/21/18
'Customer: Metal Alloy Fabrication (MAF).
'From the script 1 button on Inventory > View > Supply and Demand open up a grid that will list all the jobs in the demand screen.
'User will then enter a value for the total actual amount and we will issue material based on that.
'GCG_5168_Issue_Mat_Supply_Demand.g2u 

F.Intrinsic.Control.Try
V.Local.sError.Declare(String, "")

v.Local.sSQL.Declare(String)

'change script1 button text with populate hook #14045  on ins500 screen
f.Intrinsic.Control.If(v.Caller.Hook,=,14045)
   v.Passed.000252.Set("Issue Material")
f.Intrinsic.Control.EndIf
'when user clicks on script1 button 
f.Intrinsic.Control.If(v.Caller.Hook,=,14070)
   f.Intrinsic.Control.CallSub(IssMat)
f.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
    F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
    F.Intrinsic.UI.Msgbox(V.Local.sError)
    f.Intrinsic.Control.CallSub(f_Inventory_DashBoard_Unload)
F.Intrinsic.Control.EndTry

Program.Sub.Main.End

Program.Sub.IssMat.Start
F.Intrinsic.Control.Try
V.Local.sError.Declare(String, "")

v.Local.sSQL.Declare(String)
v.Local.sPart.Declare(String)
v.Local.sExpression.Declare(String)

'open DB connection
f.ODBC.Connection!Con.OpenCompanyConnection

v.Global.sPart.Set(v.Passed.000003)
v.Global.sRev.Set(v.Passed.000099)
v.Global.sLoc.Set(v.Passed.000004)
'v.Local.sPart.Set(v.Passed.000003)
v.Global.sUM.Set(v.Passed.000007)
F.Intrinsic.String.GSSPartString(v.Global.sPart,v.Global.sRev,v.Global.sPartRev)

'use the convert(0,sql_bit) to set up a checkbox type column in the datatable
f.Intrinsic.String.Build("SELECT CONVERT(0,SQL_BIT) AS SelectJob , JOB, SUFFIX, SEQ, (HOURS_ESTIMATED - HOURS_ACTUAL) AS HOURS_ESTIMATED  FROM V_JOB_OPERATIONS WHERE PART = '{0}' AND FLAG_CLOSED <> 'Y'",v.Global.sPartRev,v.Local.sSQL)

'create a datatable dtIssMat from v_job_operations and use sql to get the data
f.Data.DataTable.CreateFromSQL("dtIssMat","Con",v.Local.sSQL,TRUE)
' add an expression column so the job, suffix, all get sorted together
f.Data.DataTable.AddExpressionColumn("dtIssMat","JobSuffix","String","[JOB] + '-' + [SUFFIX]")
'to add more columns manually
f.Data.DataTable.AddColumn("dtIssMat","Actual","Float")
f.Data.DataTable.AddColumn("dtIssMat","Percentage","Float")
f.Data.DataTable.AddColumn("dtIssMat","Difference","Float")
f.Data.DataTable.AddColumn("dtIssMat","TotAmount","Float")
f.Data.DataTable.AddColumn("dtIssMat","CloseJob","Boolean")


'create a view of the rows
f.Data.DataView.Create("dtIssMat","dvIssMat",22)
'create gridview for gridcontrol from dataview
gui.f_IssMat.GsGcIssMat.AddGridviewFromDataview("gvIssMat","dtIssMat","dvIssMat")
'change grid column names
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","SelectJob","Caption","Select Jobs")
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","JOB","Caption","Job")
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","SUFFIX","Caption","Suffix")
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","SEQ","Caption","Sequence")
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","HOURS_ESTIMATED","Caption","Estimated Quantity")
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","Actual","Caption","Actual Quantity")
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","Percentage","Caption","Percentage")
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","Difference","Caption","Difference")
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","TotAmount","Caption","Amount to Issue")
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","CloseJob","Caption","Closed")
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","JobSuffix","Caption","Job-Suffix")
'bold columns
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","SelectJob","HeaderFontBold",True)
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","JOB","HeaderFontBold",True)
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","SUFFIX","HeaderFontBold",True)
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","SEQ","HeaderFontBold",True)
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","HOURS_ESTIMATED","HeaderFontBold",True)
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","Actual","HeaderFontBold",True)
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","Percentage","HeaderFontBold",True)
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","Difference","HeaderFontBold",True)
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","TotAmount","HeaderFontBold",True)
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","CloseJob","HeaderFontBold",True)
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","JobSuffix","HeaderFontBold",True)
'center columnnames
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","SelectJob","HeaderHAlignment","Center")
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","JOB","HeaderHAlignment","Center")
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","SUFFIX","HeaderHAlignment","Center")
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","SEQ","HeaderHAlignment","Center")
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","HOURS_ESTIMATED","HeaderHAlignment","Center")
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","Actual","HeaderHAlignment","Center")
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","Percentage","HeaderHAlignment","Center")
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","Difference","HeaderHAlignment","Center")
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","TotAmount","HeaderHAlignment","Center")
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","CloseJob","HeaderHAlignment","Center")
'format grid columns
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","Actual","DisplayCustomNumeric","##.0000")
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","Percentage","DisplayCustomNumeric","###.00%")
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","Difference","DisplayCustomNumeric","##.0000")
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","TotAmount","DisplayCustomNumeric","##.0000")
'let user select the job checkbox and closed checkbox
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","SelectJob","ReadOnly","False")
'gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","Actual","ReadOnly","False")
gui.f_IssMat.GsGcIssMat.SetColumnProperty("gvIssMat","CloseJob","ReadOnly","False")
gui.f_IssMat.txtUM.Text(v.Global.sUM)

'set the mainview of the grid control
gui.f_IssMat.GsGcIssMat.MainView("gvIssMat")

'show the screen
gui.f_IssMat..Show
'get the previous grid control settings
f.Intrinsic.Control.CallSub(Deserialize)

F.Intrinsic.Control.Catch
    F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
    F.Intrinsic.UI.Msgbox(V.Local.sError)
    f.Intrinsic.Control.CallSub(f_Inventory_DashBoard_Unload)
F.Intrinsic.Control.EndTry
Program.Sub.IssMat.End

Program.Sub.f_IssMat_Drop.Start
Program.Sub.f_IssMat_Drop.End

Program.Sub.cmdIssMat_Click.Start
v.Local.iRow.Declare(Long)
v.Local.iCount.Declare(Long)
v.Local.iIndex.Declare(Long)
v.Local.iZero.Declare(Long)
v.Local.fAmount.Declare(Float)
v.Local.sSql.Declare(String)
v.Local.iDate.Declare(Long)
v.Local.bContainsDecimal.Declare(Boolean)
v.Local.iReturn.Declare(Long)

'add rows to the library table 450100 so we can issue material with callwrapper 450100
f.Intrinsic.Control.For(v.Local.iRow,0,v.DataView.dtIssMat!dvIssMat.RowCount--,1)   
   f.Intrinsic.Control.If(v.Dataview.dtIssMat!dvIssMat(v.Local.iRow).SelectJob!FieldVal,=,True)
'if user enters a whole number like 2400 then we need to multiply by 10000, if they enter a number like 2400.25 then we just use that number   
   F.Intrinsic.String.IsInString(v.DataView.dtIssMat!dvIssMat(v.Local.iRow).TotAmount!fieldval,".",True,V.Local.bContainsDecimal)
      f.Intrinsic.Control.If(V.Local.bContainsDecimal)
         v.Local.fAmount.Set(v.DataView.dtIssMat!dvIssMat(v.Local.iRow).TotAmount!fieldvalFloat)
      f.Intrinsic.Control.Else     
         f.Intrinsic.Math.Mult(v.DataView.dtIssMat!dvIssMat(v.Local.iRow).TotAmount!fieldval,10000,v.Local.fAmount)
      f.Intrinsic.Control.EndIf       
      f.Data.DataTable.AddRow("450100","Part",v.Global.sPart,"Rev",v.Global.sRev,"Location",v.Global.sLoc.Trim,"Quantity",v.Local.fAmount,"Lot","","Bin","","Heat","","Serial","","WONumber",v.DataView.dtIssMat!dvIssMat(v.Local.iRow).JOB!fieldval,"WOSuffix",v.DataView.dtIssMat!dvIssMat(v.Local.iRow).SUFFIX!fieldval,"WOSeq",v.DataView.dtIssMat!dvIssMat(v.Local.iRow).SEQ!fieldval)
   f.Intrinsic.Control.EndIf
f.Intrinsic.Control.Next(v.Local.iRow) 

f.Intrinsic.Control.CallSub(450100Sync)
' we will not close the sequences where the actual quantity is < estimated quantity, the user will have to check the closed job box 
'need to check job_trans_err table - if line is found we were not successful, so leave line in the grid, else delete this row from the grid
'read thru the table backwards so when we delete a line the correct line is deleted
f.Intrinsic.Control.For(v.Local.iRow,v.DataView.dtIssMat!dvIssMat.RowCount--,0,-1)   
     f.Intrinsic.Control.If(v.Dataview.dtIssMat!dvIssMat(v.Local.iRow).SelectJob!FieldVal,=,True, "AND" ,v.Dataview.dtIssMat!dvIssMat(v.Local.iRow).CloseJob!FieldVal,=,True) 
       v.Local.iDate.Set(v.Ambient.Date.FormatYYYYMMDD)       
        f.Intrinsic.String.Build("SELECT COUNT(JOB) FROM V_JOB_TRANS_ERR WHERE JOB = '{0}' AND SUFFIX = '{1}' AND SEQ = '{2}' AND PART = '{3}' AND TRAN_CODE = 'J55' AND ERR_DATE = {4} ",v.DataView.dtIssMat!dvIssMat(v.Local.iRow).JOB!fieldval,v.DataView.dtIssMat!dvIssMat(v.Local.iRow).SUFFIX!fieldval,v.DataView.dtIssMat!dvIssMat(v.Local.iRow).SEQ!fieldval,v.Global.sPartRev.Trim ,v.Local.iDate, v.Local.sSql)   
        f.ODBC.Connection!Con.ExecuteandReturn(v.Local.sSql,v.Local.iCount)
        f.Intrinsic.Control.If(v.Local.iCount,=,0)
           f.Intrinsic.String.Build("UPDATE JOB_OPERATIONS SET FLAG_CLOSED = 'Y' WHERE JOB = '{0}' AND SUFFIX = '{1}' AND SEQ = '{2}' AND PART = '{3}'",v.DataView.dtIssMat!dvIssMat(v.Local.iRow).JOB!fieldval,v.DataView.dtIssMat!dvIssMat(v.Local.iRow).SUFFIX!fieldval,v.DataView.dtIssMat!dvIssMat(v.Local.iRow).SEQ!fieldval,v.Global.sPartRev.Trim ,v.Local.sSql) 
           f.ODBC.Connection!Con.Execute(V.Local.sSQL)       
'Greg B said to delete line from job_commitments
           f.Intrinsic.String.Build("DELETE FROM JOB_COMMITMENTS  WHERE JOB = '{0}' AND SUFFIX = '{1}' AND SEQUENCE = '{2}' AND PART = '{3}'",v.DataView.dtIssMat!dvIssMat(v.Local.iRow).JOB!fieldval,v.DataView.dtIssMat!dvIssMat(v.Local.iRow).SUFFIX!fieldval,v.DataView.dtIssMat!dvIssMat(v.Local.iRow).SEQ!fieldval,v.Global.sPartRev.Trim ,v.Local.sSql) 
           f.ODBC.Connection!Con.Execute(V.Local.sSQL) 
           f.Data.DataTable.DeleteRow("dtIssMat",v.Local.iRow) 
     f.Intrinsic.Control.EndIf  
     f.Intrinsic.Control.EndIf   
f.Intrinsic.Control.Next(v.Local.iRow)
f.Data.DataTable.AcceptChanges("dtIssMat")
v.Global.fEstimate.Set(v.Local.iZero)
gui.f_IssMat.txtEstVol.Text(v.Local.iZero)
gui.f_IssMat.txtActVol.Text(v.Local.iZero)
f.Intrinsic.Control.If(v.Local.iCount,=,0)
   f.Intrinsic.UI.Msgbox("The material was issued")
f.Intrinsic.Control.Else
   f.Intrinsic.UI.Msgbox("The material was not issued")
f.Intrinsic.Control.EndIf

Program.Sub.cmdIssMat_Click.End

Program.Sub.f_IssMat_UnLoad.Start
'save the settings from the gridcontrol to registry
f.Intrinsic.Control.CallSub(Serialize)

'close DB connection
f.ODBC.Connection!Con.Close
f.Intrinsic.Control.End

Program.Sub.f_IssMat_UnLoad.End

Program.Sub.GsGcIssMat_CellValueChanged.Start
'F.Intrinsic.Control.Try
'V.Local.sError.Declare(String, "")
v.Local.fPercent.Declare(Float)
v.Local.sExpression.Declare(String)
v.Local.sColumn.Declare(String)
v.Local.fEstimated.Declare(Float)
'if user selects a job then add the estimated quantity to the total estimated quantity, if they unselect the job remove the amount from total estimated
f.Intrinsic.Control.If(v.Args.Column,=,"SelectJob") 
   f.Intrinsic.Control.If(V.Args.Value,=,True)    
      gui.f_IssMat.GsGcIssMat.GetCellValueByColumnName("gvIssMat","HOURS_ESTIMATED",v.Args.RowIndex,v.Local.fEstimated)
      f.Intrinsic.Math.Add(v.Local.fEstimated,v.Global.fEstimate,v.Global.fEstimate)    
   f.Intrinsic.Control.Else  
      gui.f_IssMat.GsGcIssMat.GetCellValueByColumnName("gvIssMat","HOURS_ESTIMATED",v.Args.RowIndex,v.Local.fEstimated)
      f.Intrinsic.Math.Sub(v.Global.fEstimate,v.Local.fEstimated,v.Global.fEstimate)
   f.Intrinsic.Control.EndIf        
   gui.f_IssMat.txtEstVol.Text(v.Global.fEstimate)
f.Intrinsic.Control.EndIf

'F.Intrinsic.Control.Catch
'    F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
'    F.Intrinsic.UI.Msgbox(V.Local.sError)
'    f.Intrinsic.Control.CallSub(f_Inventory_DashBoard_Unload)
Program.Sub.GsGcIssMat_CellValueChanged.End

Program.Sub.GsGcIssMat_RowCellClick.Start
Program.Sub.GsGcIssMat_RowCellClick.End

Program.Sub.txtActVol_Change.Start
Program.Sub.txtActVol_Change.End

Program.Sub.txtActVol_LostFocus.Start
v.Local.iRow.Declare(Long)
v.Local.fPercent.Declare(Float)
v.Local.fTotPercent.Declare(Float)
v.Local.fTotPercentDiff.Declare(Float)
v.Local.fEstimated.Declare(Float)
v.Local.fActQty.Declare(Float)
v.Local.fDifference.Declare(Float)
v.Local.fAmount.Declare(Float)
v.Local.fZero.Declare(Float)
v.Global.fActual.Set(v.Screen.f_IssMat!txtActVol.Text)
f.Intrinsic.Control.If(v.Global.fActual,<>,v.Global.fActualPrev)
' loop to get all the selected jobs and divide out the total actual amount entered based on jobs selected 
   f.Intrinsic.Control.For(v.Local.iRow,0,v.DataView.dtIssMat!dvIssMat.RowCount--,1)   
     f.Intrinsic.Control.If(v.Dataview.dtIssMat!dvIssMat(v.Local.iRow).SelectJob!FieldVal,=,True)
        gui.f_IssMat.GsGcIssMat.GetCellValueByColumnName("gvIssMat","HOURS_ESTIMATED",v.Local.iRow,v.Local.fEstimated)
        f.Intrinsic.Math.Div(v.Local.fEstimated,v.Global.fEstimate,v.Local.fPercent)
        f.Intrinsic.Math.Round(v.Local.fPercent,4,v.Local.fPercent)   
        f.Intrinsic.Math.Add(v.Local.fPercent,v.Local.fTotPercent,v.Local.fTotPercent)        
        f.Intrinsic.Control.If(v.Local.fTotPercent,>,.9998, "AND" , v.Local.fTotPercent,<,1.0002) 
           f.Intrinsic.Control.If(v.Local.fTotPercent,=, 1.0000)
              gui.f_IssMat.GsGcIssMat.SetCellValueByColumnName("gvIssMat","Percentage",v.Local.iRow,v.Local.fPercent)              
           f.Intrinsic.Control.Else
              f.Intrinsic.Math.Sub(1.0000,v.Local.fTotPercent,v.Local.fTotPercentDiff)
              f.Intrinsic.Math.Add(v.Local.fTotPercentDiff,v.Local.fPercent,v.Local.fPercent)
              gui.f_IssMat.GsGcIssMat.SetCellValueByColumnName("gvIssMat","Percentage",v.Local.iRow,v.Local.fPercent)
            f.Intrinsic.Control.EndIf                        
        f.Intrinsic.Control.Else
           gui.f_IssMat.GsGcIssMat.SetCellValueByColumnName("gvIssMat","Percentage",v.Local.iRow,v.Local.fPercent) 
        f.Intrinsic.Control.EndIf      
        f.Intrinsic.Math.Mult(v.Global.fActual,v.Local.fPercent,v.Local.fActqty)
        f.Intrinsic.Control.If(v.Local.fActQty,>=,v.Local.fEstimated)
           gui.f_IssMat.GsGcIssMat.SetCellValueByColumnName("gvIssMat","CloseJob",v.Local.iRow,True)
        f.Intrinsic.Control.Else
           gui.f_IssMat.GsGcIssMat.SetCellValueByColumnName("gvIssMat","CloseJob",v.Local.iRow,False)
        f.Intrinsic.Control.EndIf
        gui.f_IssMat.GsGcIssMat.SetCellValueByColumnName("gvIssMat","Actual",v.Local.iRow,v.Local.fActqty)
        f.Intrinsic.Math.Sub(v.Global.fActual,v.Global.fEstimate,v.Global.fTotDiff)
        f.Intrinsic.Math.Mult(v.Global.fTotDiff,v.Local.fPercent,v.Local.fDifference)
        gui.f_IssMat.GsGcIssMat.SetCellValueByColumnName("gvIssMat","Difference",v.Local.iRow,v.Local.fDifference)
        f.Intrinsic.Math.Add(v.Local.fEstimated,v.Local.fDifference,v.Local.fAmount)
        gui.f_IssMat.GsGcIssMat.SetCellValueByColumnName("gvIssMat","TotAmount",v.Local.iRow,v.Local.fAmount)
     f.Intrinsic.Control.Else
' if they user had selected this job , but now they unselected it, then I need to display 0 in the grid columns     
        v.Local.fZero.Set(0)
        gui.f_IssMat.GsGcIssMat.SetCellValueByColumnName("gvIssMat","Percentage",v.Local.iRow,v.Local.fZero) 
        gui.f_IssMat.GsGcIssMat.SetCellValueByColumnName("gvIssMat","Actual",v.Local.iRow,v.Local.fZero)
        gui.f_IssMat.GsGcIssMat.SetCellValueByColumnName("gvIssMat","Difference",v.Local.iRow,v.Local.fZero)
        gui.f_IssMat.GsGcIssMat.SetCellValueByColumnName("gvIssMat","TotAmount",v.Local.iRow,v.Local.fZero)
        gui.f_IssMat.GsGcIssMat.SetCellValueByColumnName("gvIssMat","CloseJob",v.Local.iRow,False)
     f.Intrinsic.Control.EndIf
   f.Intrinsic.Control.Next(v.Local.iRow)  
v.Global.fActualPrev.Set(v.Global.fActual)
f.Intrinsic.Control.EndIf
Program.Sub.txtActVol_LostFocus.End

Program.Sub.Serialize.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	V.Local.sSerialize.Declare	
'save grid settings to registry	
	gui.f_IssMat.GsGcIssMat.Serialize("gvIssMat",v.Local.sSerialize)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"gvIssMat",5168,1000,False,"Serialize",False,0,-999.0,1/1/1980,12:00:00 AM,V.Local.sSerialize)
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndTry
Program.Sub.Serialize.End

Program.Sub.DeSerialize.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	V.Local.sSerialize.Declare
	
'Delete old registry records
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"gvIssMat",5168,0,5,"",V.Local.sSerialize)
	F.Intrinsic.Control.If(V.Local.sSerialize,<>,"")
		F.ODBC.Connection!common.OpenConnection(V.Ambient.Ccon,V.Ambient.Cuser,V.Ambient.Cpass)
		F.ODBC.Connection!common.Execute("Delete From Gs_Registry Where Reg_ID = 5168 And Seq < 1000;")
		F.ODBC.Connection!common.Close
	F.Intrinsic.Control.EndIf
'read grid settings from registry
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"gvIssMat",5168,1000,6,"",V.Local.sSerialize)
	F.Intrinsic.Control.If(V.Local.sSerialize,<>,"")
		gui.f_IssMat.GsGcIssMat.Deserialize(V.Local.sSerialize)
	F.Intrinsic.Control.EndIf
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndTry

Program.Sub.DeSerialize.End

Program.Sub.Comments.Start
${$0$}$$}$$}$12:00:00 AM$}$False
Program.Sub.Comments.End